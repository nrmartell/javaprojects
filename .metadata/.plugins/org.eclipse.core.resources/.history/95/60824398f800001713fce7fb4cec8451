public class ListOperations {

	public static void main(String[] args){ 
	MyListOfInts m=null;
	for (int i=0; i<5;i++){
//		int ran = (int) (100.0* Math.random());
		int ran = i+2;
		m=new MyListOfInts(ran, m); }
		System.out.println("All numbers in the list:"); printMyList(m);
		System.out.println();
		System.out.println("Sum="+sumOfMyList(m)); System.out.println("Max="+maxOfMyList(m)); System.out.println("Length="+lengthOfMyList(m));
		m=reverseMyList(m);
		System.out.println("All numbers in the reversed list:"); printMyList(m);
		System.out.println();
	}

/*
This method cannot contain any loop (that is, uses of for, while, do while are prohibited).
*/
	public static void printMyList(MyListOfInts m){
		if(m == null){
			return;
		}
	}

	
	
	/* Write a recursive method to retrieve the sum of all the numbers in a list. This method cannot contain any loop (that is, uses of for, while, do while are prohibited).*/
	public static int sumOfMyList (MyListOfInts m){ 
		if(m==null){
			return 0;
		
		}
		return 0;
//	
	}


/* Write a recursive method to retrieve the largest number from the list. Assume that there is at least one number in the given list when the method is called from the main function. This method cannot contain any loop (that is, uses of for, while, do while are prohibited).
*/
	public static int maxOfMyList (MyListOfInts m){ 
//	
//		if(m==null){
//			return 0;
//		}
//		return 0;
//	}
	

	     if(m.next == null)
	          return m;
	     int previousMax = maxOfList(m.next);
	     if(m > previousMax)
	          return m;
	     else
	          return previousMax;
	}
	

/* Write a recursive method to compute the length of a list.
This method cannot contain any loop (that is, uses of for, while, do while are prohibited).
*/
	public static int lengthOfMyList (MyListOfInts m){
		if(m==null){
			return 0;
		}
	
		return 1+lengthofMyList(m.next);
	}
	//Write a recursive method to print all the numbers separated by spaces.
	/* Write a recursive method named reverseMyList that will reverse a given linked list m. Return the head of the reversed linked list. It is fine
	if you need to modify the given linked list to obtain the reversed one. The method reverseMyList may not contain any loop.
	*/
	public static MyListOfInts reverseMyList (MyListOfInts m){ 
			if(m==null){
				return m;
			}

			printMyList(m.next);
			System.out.println(m.data);
			return m;
	}
	public ListOperations next; 
}