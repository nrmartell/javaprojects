//
//public class MyListOfInts {
//	public int firstInt;
//	
//	public MyListOfInts restOfTheInts;
//
//	public MyListOfInts(int f){ 
//		firstInt=f;
//	}
//
//	public MyListOfInts(int f, MyListOfInts r){ 
//	firstInt=f;
//	restOfTheInts=r;
//	}
//
//}

//public class MyListOfInts {
//	
//	private ListOperations head;
//	public MyListOfInts next;
//	int length;
//	
//	
//	public MyListOfInts(int ran, MyListOfInts t) {
//		this.head = null;
//		this.length = 0;
//	}
//
//	  public @MyListOfInts getNext(){
//	        return next;
//	    }
//	  
//	  public MyListOfInts getInfo(){
//	        return next;
//	    }
//	 //This function prints the sequence of person in list 
//	 
//	public void printList() {
//		if(this.length == 0) {
//			System.out.println("\nThe list is empty.");
//			return;
//		}
//		ListOperations cur = this.head;
//		
//		while(cur != null) {
//			System.out.println(cur.toString());
//			cur = cur.next;
//		}
//	}
//
//	public char[] getinfo() {
//		// TODO Auto-generated method stub
//		return null;
//	}
//	
//}



public class MyListOfInts {

   private ListOperations head, tail;

   private int size;

   public MyListOfInts() {

       head = null;

       size = 0;

       tail = null;

   }
   
	  public MyListOfInts getNext(){
	        return next;
	    }

   public void append(int data) {

       // if list is null

       if(head == null){

           head = new ListOperations(data);

           tail = head;

           return;

       }

      

       ListOperations newNode = new ListOperations(data);

       tail.next = newNode;

       tail = newNode;

   }

  

   public void deleteLast(){

       if(head == null){

           System.out.println("List is empty");

           return ;

       }

      

       if(head.next == null){ // only one node

           head = tail = null;

       }

      

       ListOperations temp = head;

       while(temp.next != tail)

           temp = temp.next;

      

       temp.next = null;

       tail = temp;

   }

  

   public void deleteNthNode(int n){

       if(size < n){

           System.out.println("Less than "+n+"node in list");

           return;

       }

      

       if(n==1){// delete first element

           head = head.next;

           return;

       }

      

       if(size == n){ // delete last

           deleteLast();

           return;

       }

      

       ListOperations temp = head;

       for(int i=1; i<n-1; i++)

           temp = temp.next;

       temp.next = temp.next.next;

   }

  

   public void insertAfter(int data, int n){

       if(n > size + 1){

           System.out.println("Total number of elements in list is "+size);

           return;

       }

      

       ListOperations newNode = new ListOperations(data);

       if(n==1){//inserting at first

           newNode.next = head;

           head = newNode;

          

           if(tail == null)

               tail = head;

       }

       else if(size+1 == n){ // inserting at last

           tail.next = newNode;

           tail = newNode;

       }

       else{

           ListOperations temp = head;

           for(int i=1; i<n-1; i++){

               temp = temp.next;

           }

           newNode.next = temp.next;

           temp.next = newNode;

       }

   }

  

   public int size(){

       return size;

   }

   public void display(){

       ListOperations temp = head;

      

       while(temp != null){

           if(temp.next!=null)

               System.out.print(temp.data+"-->");

           else

               System.out.println(temp.data);

           temp = temp.next;

       }

       System.out.println();

   }

}