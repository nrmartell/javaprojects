   /*------------------------------------------------------------------------------------
    |  Name: Natalie Martell
    |  Lab 4
    |  TA: Anthony Ortiz
    |  Date Modified 3/7/17	
    |  Purpose:  Program is designed to create a linked list and use recursion to
    |  perform certain tasks like printing the list, finding the max and adding values
    *------------------------------------------------------------------------------------*/


public class ListOperations {
	
	public static void main(String[] args){
		MyListOfInts t=null;
		for (int i=0; i<5;i++){
//			int ran = (int) (100.0* Math.random());
			int ran = i+2;
			t=new MyListOfInts(ran, t);
		}
		System.out.println("All numbers in the list:");
		printMyList(t);
		System.out.println();
		System.out.println("Sum="+sumOfMyList(t));
		System.out.println("Max="+maxOfMyList(t));
		System.out.println("Length="+lengthOfMyList(t));
		t=reverseMyList(t);
		System.out.println("All numbers in the reversed list:");
		printMyList(t);
		System.out.println();
	}
	/* Write a recursive method to print all the numbers separated by spaces.
	This method cannot contain any loop (that is, uses of for, while, do
	while are prohibited).
	*/
	public static void printMyList(MyListOfInts m){
		
		//If current node is null, shouldn't print anything
		if(m==null){
			return;
		}
		
		//Printing current number
		System.out.print(m.firstInt + " ");
		
		//Recursive Step
		printMyList(m.restOfTheInts);
	}
	
	/* Write a recursive method to retrieve the sum of all the numbers in a list.
	This method cannot contain any loop (that is, uses of for, while, do while
	are prohibited).
	*/

	public static int sumOfMyList (MyListOfInts m){
		//If current node is null, we shouldn't add anything to the sum
		if(m==null){
			return 0;
		}
		
		//Recursive Step
		return m.firstInt + sumOfMyList(m.restOfTheInts);
	}
	/* Write a recursive method to retrieve the largest number from the list.
	Assume that there is at least one number in the given list when the method
	is called from the main function. This method cannot contain any loop (that
	is, uses of for, while, do while are prohibited).
	*/

	public static int maxOfMyList (MyListOfInts m){
		if(m==null){
			return 0;
		//Recursive Step
		}
		return Math.max(m.firstInt, maxOfMyList (m.restOfTheInts));
	}
	
	/* Write a recursive method to compute the length of a list.
	This method cannot contain any loop (that is, uses of for, while, do while
	are prohibited).
	*/

	public static int lengthOfMyList (MyListOfInts m){
		if(m==null){
			return 0;
		}
		//Recursive Step
		return 1+lengthOfMyList(m.restOfTheInts);
	}
	
	/* Write a recursive method named reverseMyList that will reverse a given
	linked list m. Return the head of the reversed linked list. It is fine
	if you need to modify the given linked list to obtain the reversed one.
	The method reverseMyList may not contain any loop.
	*/

	public static MyListOfInts reverseMyList (MyListOfInts m){
		
	
		// Empty list or list has only one node 
		if(m == null || m.restOfTheInts == null){
	        return m;
	    }
		
		// Recursive call on rest of ints
	    MyListOfInts rest = reverseMyList(m.restOfTheInts);
	    
	    // Make first link to the last node in the reversed rest.
	    m.restOfTheInts.restOfTheInts = m;
	    
	    // Since first is the new last, make its restOfTheInts null.
	    m.restOfTheInts = null;

	    // Rest now points to the head of the reversed list.
	    return rest;
	    
	    
	    
	}
}